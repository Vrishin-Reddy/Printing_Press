[
  {
    "id": "TC001",
    "title": "Booking form - Successful submission with valid data and attachments",
    "description": "Verify that the Booking form accepts valid inputs, validates client-side, allows file uploads within constraints, submits via Web3Forms API with correct access key, shows success toast and resets form.",
    "category": "functional",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Navigate to Booking page"
      },
      {
        "type": "action",
        "description": "Fill in all required form fields with valid data (name, email, phone, service selection, dimensions, quantity, preferred date, additional info)"
      },
      {
        "type": "action",
        "description": "Attach valid file types (PDF, PNG, JPG, SVG, TIFF) within 10MB size limit"
      },
      {
        "type": "action",
        "description": "Submit the Booking form"
      },
      {
        "type": "assertion",
        "description": "Validate client-side form passes without errors"
      },
      {
        "type": "assertion",
        "description": "Verify POST request to Web3Forms API includes all field data and access key with multipart/form-data"
      },
      {
        "type": "assertion",
        "description": "Check visible progress indicator during submission"
      },
      {
        "type": "assertion",
        "description": "Confirm success toast is displayed"
      },
      {
        "type": "assertion",
        "description": "Verify form resets to initial state after successful submission"
      },
      {
        "type": "assertion",
        "description": "Ensure email is delivered to configured inbox with attachments"
      }
    ]
  },
  {
    "id": "TC002",
    "title": "Booking form - Client-side validation errors with invalid input",
    "description": "Verify that invalid inputs in the Booking form are caught client-side, preventing submission and showing appropriate error messages.",
    "category": "error handling",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Navigate to Booking page"
      },
      {
        "type": "action",
        "description": "Input invalid email format"
      },
      {
        "type": "action",
        "description": "Leave required fields (e.g. name, service) blank"
      },
      {
        "type": "action",
        "description": "Enter invalid phone number format"
      },
      {
        "type": "action",
        "description": "Attach file exceeding 10MB or with unsupported file type (e.g. .exe)"
      },
      {
        "type": "action",
        "description": "Attempt to submit the Booking form"
      },
      {
        "type": "assertion",
        "description": "Validate form shows field-specific validation error messages"
      },
      {
        "type": "assertion",
        "description": "Submission is prevented until all errors are resolved"
      }
    ]
  },
  {
    "id": "TC003",
    "title": "Booking form - Web3Forms error handling on submission failure",
    "description": "Verify that when the Web3Forms API responds with an error (e.g. network failure, domain reject), the Booking form shows an error toast with the returned error message and does not reset form.",
    "category": "error handling",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Navigate to Booking page"
      },
      {
        "type": "action",
        "description": "Fill form with valid inputs"
      },
      {
        "type": "action",
        "description": "Simulate Web3Forms API failure response with error message"
      },
      {
        "type": "action",
        "description": "Submit the Booking form"
      },
      {
        "type": "assertion",
        "description": "Error toast is displayed showing the API error message"
      },
      {
        "type": "assertion",
        "description": "Form fields retain their input values (no reset)"
      }
    ]
  },
  {
    "id": "TC004",
    "title": "Contact form - Successful submission with optional fields and attachments",
    "description": "Verify Contact form accepts valid inputs including optional deadline, WhatsApp opt-in, file attachments within constraints, submits via Web3Forms with access key, and shows success toast with form reset.",
    "category": "functional",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Navigate to Contact page"
      },
      {
        "type": "action",
        "description": "Fill required and optional fields with valid data, including deadline and WhatsApp opt-in checked"
      },
      {
        "type": "action",
        "description": "Attach valid files within size limits"
      },
      {
        "type": "action",
        "description": "Submit Contact form"
      },
      {
        "type": "assertion",
        "description": "Validate client-side form passes validations"
      },
      {
        "type": "assertion",
        "description": "Verify form submission POST includes all fields and files with access key"
      },
      {
        "type": "assertion",
        "description": "Check progress indicator during submission"
      },
      {
        "type": "assertion",
        "description": "Confirm success toast appears"
      },
      {
        "type": "assertion",
        "description": "Verify form resets after successful submission"
      },
      {
        "type": "assertion",
        "description": "Ensure email is delivered with all attachments included"
      }
    ]
  },
  {
    "id": "TC005",
    "title": "Contact form - Client-side validation errors for mandatory fields and invalid inputs",
    "description": "Verify that invalid or missing inputs in Contact form trigger client-side validation errors preventing submission and displaying accurate error messages.",
    "category": "error handling",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Navigate to Contact page"
      },
      {
        "type": "action",
        "description": "Leave required fields blank"
      },
      {
        "type": "action",
        "description": "Enter invalid email format"
      },
      {
        "type": "action",
        "description": "Attach oversized or unsupported file type"
      },
      {
        "type": "action",
        "description": "Attempt submission"
      },
      {
        "type": "assertion",
        "description": "Field-level validation error messages appear"
      },
      {
        "type": "assertion",
        "description": "Submission is blocked until corrections are made"
      }
    ]
  },
  {
    "id": "TC006",
    "title": "Contact form - Spam prevention via honeypot fields",
    "description": "Verify that if hidden honeypot fields are filled, the form submission is blocked or discarded to mitigate spam.",
    "category": "security",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Navigate to Contact page"
      },
      {
        "type": "action",
        "description": "Manually fill hidden honeypot field(s) via browser devtools or automation"
      },
      {
        "type": "action",
        "description": "Fill other form fields with valid data"
      },
      {
        "type": "action",
        "description": "Submit Contact form"
      },
      {
        "type": "assertion",
        "description": "Form submission is prevented or API rejects due to honeypot"
      },
      {
        "type": "assertion",
        "description": "No success toast is shown"
      }
    ]
  },
  {
    "id": "TC007",
    "title": "Email Link component - Opens system mail app on mobile devices",
    "description": "Verify that clicking the email link on mobile devices opens the device's system mail application directly.",
    "category": "functional",
    "priority": "Medium",
    "steps": [
      {
        "type": "action",
        "description": "Open the website on a mobile device"
      },
      {
        "type": "action",
        "description": "Click on email link in footer or contact details"
      },
      {
        "type": "assertion",
        "description": "Confirm system mail app opens to compose a new mail"
      }
    ]
  },
  {
    "id": "TC008",
    "title": "Email Link component - On desktop prompts Gmail, Outlook Web or default mail client",
    "description": "Verify that clicking the email link on desktop prompts the user to choose Gmail web, Outlook web, or the default mail client with working navigation or clipboard fallback.",
    "category": "functional",
    "priority": "Medium",
    "steps": [
      {
        "type": "action",
        "description": "Open the website on a desktop browser"
      },
      {
        "type": "action",
        "description": "Click on email link in footer or contact details"
      },
      {
        "type": "assertion",
        "description": "Prompt appears offering Gmail, Outlook Web, or default mail client options"
      },
      {
        "type": "action",
        "description": "Select each option and verify correct behavior:"
      },
      {
        "type": "assertion",
        "description": "Selecting Gmail or Outlook web opens correct URL to compose new email"
      },
      {
        "type": "assertion",
        "description": "Selecting default mail client opens system mail application"
      },
      {
        "type": "action",
        "description": "Simulate failure to open mail client or webmail"
      },
      {
        "type": "assertion",
        "description": "User is informed and email address is copied to clipboard as fallback"
      }
    ]
  },
  {
    "id": "TC009",
    "title": "File upload - Enforce accepted types and size limits in Booking and Contact forms",
    "description": "Verify that the file upload component strictly enforces allowed file types (PDF, PNG, JPG, SVG, TIFF) and maximum size (default 10 MB) prior to submission in both Booking and Contact forms.",
    "category": "functional",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Navigate to Booking and Contact pages"
      },
      {
        "type": "action",
        "description": "Attempt to upload valid files (supported types and size <10MB)"
      },
      {
        "type": "assertion",
        "description": "Files are accepted and shown in upload component"
      },
      {
        "type": "action",
        "description": "Attempt to upload files with unsupported extensions"
      },
      {
        "type": "assertion",
        "description": "Upload is rejected; appropriate error message displayed"
      },
      {
        "type": "action",
        "description": "Attempt to upload files exceeding 10MB"
      },
      {
        "type": "assertion",
        "description": "Upload is rejected; size error message displayed"
      }
    ]
  },
  {
    "id": "TC010",
    "title": "Navigation - Client-side routing between pages without full reload",
    "description": "Verify React Router enables smooth navigation between pages (Home, Services, Portfolio, Testimonials, About, Booking, Contact) with state persistence where applicable and no full page reloads.",
    "category": "functional",
    "priority": "Medium",
    "steps": [
      {
        "type": "action",
        "description": "Load the Home page"
      },
      {
        "type": "action",
        "description": "Click navigation links to Services, Portfolio, Testimonials, About, Booking, and Contact pages"
      },
      {
        "type": "assertion",
        "description": "URL updates in browser without full page reload"
      },
      {
        "type": "assertion",
        "description": "Page content updates correctly for each route"
      }
    ]
  },
  {
    "id": "TC011",
    "title": "404 Not Found page displays on invalid routes",
    "description": "Verify that navigating to an invalid or unknown URL path displays the user-friendly 404 Not Found page with guidance to existing content.",
    "category": "functional",
    "priority": "Medium",
    "steps": [
      {
        "type": "action",
        "description": "Navigate to an invalid URL path (e.g., /invalid-route)"
      },
      {
        "type": "assertion",
        "description": "404 Not Found page is displayed"
      },
      {
        "type": "assertion",
        "description": "Page shows friendly message and links to home or other valid pages"
      }
    ]
  },
  {
    "id": "TC012",
    "title": "Accessibility - Keyboard navigation and ARIA compliance across key components",
    "description": "Verify all interactive elements (forms, buttons, dialogs, links, toasts) are keyboard navigable, have visible focus states, and include appropriate ARIA attributes for screen readers.",
    "category": "ui",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Navigate through pages using keyboard only (Tab, Shift+Tab, Enter, Space)"
      },
      {
        "type": "assertion",
        "description": "All form inputs, buttons, menu links, dialogs and toasts receive visible focus"
      },
      {
        "type": "assertion",
        "description": "ARIA attributes are present as per accessibility standards"
      },
      {
        "type": "action",
        "description": "Confirm that screen reader announces UI elements correctly"
      }
    ]
  },
  {
    "id": "TC013",
    "title": "Toaster component usage and behavior on feedback messages",
    "description": "Verify that the single Toaster component mounted at root displays toast notifications with correct colors, content, and close buttons and automatically handles multiple toasts sequentially.",
    "category": "ui",
    "priority": "Medium",
    "steps": [
      {
        "type": "action",
        "description": "Trigger multiple success and error messages by submitting forms with various outcomes"
      },
      {
        "type": "assertion",
        "description": "Toast notifications appear with correct styling (colors matching message type)"
      },
      {
        "type": "assertion",
        "description": "Each toast includes a close button that dismisses the toast"
      },
      {
        "type": "assertion",
        "description": "Toasts queue and display sequentially if multiple triggered"
      }
    ]
  },
  {
    "id": "TC014",
    "title": "Domain allow-list enforcement and spam mitigation at Web3Forms level",
    "description": "Verify that form submissions with email domains not in the allowed list are rejected by the Web3Forms API, and appropriate error messages appear to users.",
    "category": "security",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Fill Booking or Contact form with an email address from a domain not on the allow-list"
      },
      {
        "type": "action",
        "description": "Submit the form"
      },
      {
        "type": "assertion",
        "description": "Web3Forms rejects the submission due to domain allow-list restrictions"
      },
      {
        "type": "assertion",
        "description": "User sees an error toast showing the rejection message"
      }
    ]
  },
  {
    "id": "TC015",
    "title": "Performance - Core Web Vitals meet minimum thresholds on Home and key pages",
    "description": "Using Lighthouse or similar tool, validate that pages (Home, Booking, Services) achieve accessibility and performance scores of 90 or above.",
    "category": "performance",
    "priority": "Medium",
    "steps": [
      {
        "type": "action",
        "description": "Load Home, Booking, and Services pages with Lighthouse"
      },
      {
        "type": "assertion",
        "description": "Accessibility score is 90 or greater"
      },
      {
        "type": "assertion",
        "description": "Performance score is 90 or greater"
      }
    ]
  },
  {
    "id": "TC016",
    "title": "Analytics - Vercel Analytics collects page views without PII",
    "description": "Verify page view analytics are collected via Vercel Analytics service without including any personally identifiable or sensitive information.",
    "category": "security",
    "priority": "Medium",
    "steps": [
      {
        "type": "action",
        "description": "Navigate through multiple pages in the app"
      },
      {
        "type": "assertion",
        "description": "Vercel Analytics records page views successfully"
      },
      {
        "type": "assertion",
        "description": "No PII such as form inputs or user identifiers are present in analytics data"
      }
    ]
  },
  {
    "id": "TC017",
    "title": "Static build and deployment verification on Vercel with no serverless functions",
    "description": "Verify that the project builds successfully using Vite with output in dist/ directory and deploys on Vercel as a static site with no serverless or backend functions running.",
    "category": "functional",
    "priority": "High",
    "steps": [
      {
        "type": "action",
        "description": "Run static build via `vite build` and ensure output is generated in dist/"
      },
      {
        "type": "assertion",
        "description": "Build completes without error"
      },
      {
        "type": "action",
        "description": "Deploy to Vercel"
      },
      {
        "type": "assertion",
        "description": "Deployment uses static hosting only, with no serverless functions invoked"
      },
      {
        "type": "assertion",
        "description": "Site functions correctly as per specifications"
      }
    ]
  }
]
